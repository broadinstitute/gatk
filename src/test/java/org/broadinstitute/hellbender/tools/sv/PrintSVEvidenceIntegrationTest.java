package org.broadinstitute.hellbender.tools.sv;

import htsjdk.samtools.util.FileExtensions;
import org.broadinstitute.hellbender.CommandLineProgramTest;
import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;
import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;
import org.broadinstitute.hellbender.utils.codecs.BafEvidenceCodec;
import org.broadinstitute.hellbender.utils.codecs.DepthEvidenceCodec;
import org.broadinstitute.hellbender.utils.codecs.DiscordantPairEvidenceCodec;
import org.broadinstitute.hellbender.utils.codecs.SplitReadEvidenceCodec;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.Collections;

public class PrintSVEvidenceIntegrationTest extends CommandLineProgramTest {

    public static final String printEvidenceTestDir = toolsTestDir + "walkers/sv/printevidence";

    // these test files were generated by tabix
    // note tabix interval ends are inclusive but GATK's are exclusive
    @DataProvider
    public Object[][] printSVEvidenceCases() {
        return new Object[][]{
                {
                        "print read pairs zipped",
                        printEvidenceTestDir + "/test_hg38" + DiscordantPairEvidenceCodec.FORMAT_SUFFIX + ".gz",
                        DiscordantPairEvidenceCodec.FORMAT_SUFFIX,
                        "chr22:30500000-30550001",
                        printEvidenceTestDir + "/output.test_hg38" + DiscordantPairEvidenceCodec.FORMAT_SUFFIX + ".gz",
                },
                {
                        "print read pairs unzipped",
                        printEvidenceTestDir + "/test_hg38" + DiscordantPairEvidenceCodec.FORMAT_SUFFIX + ".gz",
                        DiscordantPairEvidenceCodec.FORMAT_SUFFIX,
                        "chr22:30500000-30550001",
                        printEvidenceTestDir + "/output.test_hg38" + DiscordantPairEvidenceCodec.FORMAT_SUFFIX,
                },
                {
                    "print split reads zipped",
                    printEvidenceTestDir + "/test_hg38" + SplitReadEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    SplitReadEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    "chr22:30500000-30550001",
                    printEvidenceTestDir + "/output.test_hg38" + SplitReadEvidenceCodec.FORMAT_SUFFIX + ".gz",
                },
                {
                    "print baf zipped",
                    printEvidenceTestDir + "/test_hg38" + BafEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    BafEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    "chr22:30500000-30550001",
                    printEvidenceTestDir + "/output.test_hg38" + BafEvidenceCodec.FORMAT_SUFFIX + ".gz",
                },
                {
                    "print rd zipped",
                    printEvidenceTestDir + "/test_hg38" + DepthEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    DepthEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    "chr22:30500000-30550001",
                    printEvidenceTestDir + "/output.test_hg38" + DepthEvidenceCodec.FORMAT_SUFFIX + ".gz",
                },
                {
                    "print rd unzipped",
                    printEvidenceTestDir + "/test_hg38" + DepthEvidenceCodec.FORMAT_SUFFIX + ".gz",
                    DepthEvidenceCodec.FORMAT_SUFFIX,
                    "chr22:30500000-30550001",
                    printEvidenceTestDir + "/output.test_hg38" + DepthEvidenceCodec.FORMAT_SUFFIX,
                }
        };
    }
    @Test(dataProvider="printSVEvidenceCases")
    public void testPrintSplitReads(final String testName, final String input, final String extension, final String interval, final String output) throws Exception {
        final String args = "--evidence-file " + input
                + " -" + StandardArgumentDefinitions.INTERVALS_SHORT_NAME + " " + interval
                + " --" + StandardArgumentDefinitions.SEQUENCE_DICTIONARY_NAME + " " + FULL_HG38_DICT
                + " -" + StandardArgumentDefinitions.OUTPUT_SHORT_NAME + " %s";
        final IntegrationTestSpec spec = new IntegrationTestSpec(args, Collections.singletonList(output));
        spec.setOutputFileExtension(extension);
        final String expectedIndexExtension = extension.endsWith(".gz") ? FileExtensions.TABIX_INDEX : null;
        spec.executeTest(testName, this, expectedIndexExtension);
    }

}