package org.broadinstitute.hellbender;

import com.github.lindenb.jbwa.jni.AlnRgn;
import com.github.lindenb.jbwa.jni.BwaIndex;
import com.github.lindenb.jbwa.jni.BwaMem;
import com.github.lindenb.jbwa.jni.ShortRead;
import org.broadinstitute.hellbender.utils.bwa.BWANativeLibrary;
import org.broadinstitute.hellbender.utils.test.BaseTest;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.io.File;
import java.util.Arrays;

public class JBWAIntegrationTest extends BaseTest {

    @Test
    public void testJBWAIsLoadable(){
        BWANativeLibrary.load();
    }


    @Test
    public void testJBWAAlignSingleRead() throws Exception {
        BWANativeLibrary.load();

        final BwaIndex index= new BwaIndex(new File(b37_reference_20_21));
        final BwaMem bwaMem = new BwaMem(index);
        try {
            //real read taken from src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam
            final String name = "20FUKAAXX100202:3:46:9213:168594";
            final byte[] seqs = "GTTTTGTTTACTACAGCTTTGTAGTAAATTTTGAACTCTAAAGTGTTAGTTCTCTAACTTTGTTTGTTTTTCAAGAGTGTTTTGACTCTTCTTACTGCATC".getBytes();
            final byte[] quals = "DGFDGFDHFFFFGFEFHEGFFFGGHEHFHGHHGEGGGGGFGFHGHGHEHGGGFGAEFGDACAHHDHGCGFGGGFGDHGHFFHDDCGGDGEE".getBytes();
            final ShortRead read = new ShortRead(name, seqs, quals);
            final AlnRgn[] align = bwaMem.align(read);
            Assert.assertEquals(align.length, 1);
            Assert.assertEquals(align[0].getChrom(), "20");
            Assert.assertEquals(align[0].getCigar(), "101M");
            Assert.assertEquals(align[0].getMQual(), 60);
            Assert.assertEquals(align[0].getPos(), 9999997 - 1); // note difference from the bam file (9999997 in bam, 9999996 here)
            Assert.assertEquals(align[0].getNm(), 0);
        } finally {
            bwaMem.dispose();
            index.close();
        }
    }

    @Test
    public void testJBWAAlignChimericContig() throws Exception {
        BWANativeLibrary.load();

        final BwaIndex index = new BwaIndex(new File(b37_reference_20_21));
        final BwaMem bwaMem = new BwaMem(index);

        try {
            final String name = "TestAssembledContig";
            // synthetic contig generated by extracting 300 bases from two different positions on chr20 in the reference
            final byte[] seqs = "GTGGGAGAGAACTGGAACAAGAACCCAGTGCTCTTTCTGCTCTACCCACTGACCCATCCTCTCACGCATCATACACCCATACTCCCATCCACCCACCTTCCCATTCATGCATTCACCCATTCACCCACCTTCCATCCATCTACCATCCACCACGTACCTACACTCCCATCTACCATCCAACCACATTTCCATTCACCCATCCTCCCATCCATCAACCCTCCAATCCACCACCCACAGACCTTCCCATCCATTCATTTACCCATCCACATATTCACCCACCCTCCCATCCATCCATCTACTTGAAGCAGAATGAGGGAGGAAACCCAAGCCAGCTCGGGCTTGATCATGGCAGGCTTTGTCAGTCACTGTGAGTAACCAGACTTTATTTCAAGTGAGTTGGCCAACAGTGTCTCCCCAGTAGTAGAGTGATTGCTCGTCTGCCAGAAAAGGGGCACAGAGCTCTGGACATCAATACTTGCCGATCTCTCCTTCATCAGCCACCCAACCCTGGCAACAGTTTTCAATTACACCTGTGAAAACTTGTGGGTTAAACAGCTGAGATCCATGCCTCAGCTTCTATAGGTGATAAGCCTGTCCTTC".getBytes();
            final byte[] quals = new byte[seqs.length];
            for (int i = 0; i < quals.length; i++) {
                quals[i] = 'A';
            }
            final ShortRead read = new ShortRead(name, seqs, quals);
            final AlnRgn[] align = bwaMem.align(read);

            Assert.assertEquals(align.length, 2);

            Arrays.sort(align, (o1, o2) -> new Long(o1.getPos()).compareTo(o2.getPos()));

            final AlnRgn alignRgn1 = align[0];
            Assert.assertEquals(alignRgn1.getChrom(), "20");
            Assert.assertEquals(alignRgn1.getCigar(), "300M300S");
            Assert.assertEquals(alignRgn1.getMQual(), 60);
            Assert.assertEquals(alignRgn1.getPos(), 999999);

            final AlnRgn alignRgn2 = align[1];
            Assert.assertEquals(alignRgn2.getChrom(), "20");
            Assert.assertEquals(alignRgn2.getCigar(), "300S300M");
            Assert.assertEquals(alignRgn2.getMQual(), 60);
            Assert.assertEquals(alignRgn2.getPos(), 1000999);
        } finally {
            bwaMem.dispose();
            index.close();
        }
    }   
}
