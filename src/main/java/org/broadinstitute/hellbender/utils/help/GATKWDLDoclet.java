package org.broadinstitute.hellbender.utils.help;

import com.sun.javadoc.ClassDoc;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;
import org.broadinstitute.barclay.help.*;

import java.io.*;
import java.util.List;
import java.util.Map;

/**
 * Custom Barclay-based Javadoc Doclet used for generating tool WDL.
 *
 * NOTE: Methods in this class are intended to be called by Gradle/Javadoc only, and should not be called
 * by methods that are used by the GATK runtime. This class has a dependency on com.sun.javadoc classes,
 * which may not be present since they're not provided as part of the normal GATK runtime classpath.
 */
public class GATKWDLDoclet extends HelpDoclet {

    // emit an index file with links to all of the .wdl files
    private final static String GATK_FREEMARKER_INDEX_TEMPLATE_NAME = "wdlIndexTemplate.html.ftl";

    /**
     * Create a WDL doclet and generate the FreeMarker templates properties.
     * @param rootDoc
     * @throws IOException
     */
    public static boolean start(final com.sun.javadoc.RootDoc rootDoc) throws IOException {
        return new GATKWDLDoclet().startProcessDocs(rootDoc);
    }

    /**
     * Return the name of the freemarker template to be used for the index generated by Barclay.
     * For WDL gen, we create an index file that links to each of the generated WDL files.
     * Must reside in the folder passed to the Barclay Javadc Doclet via the "-settings-dir" parameter.
     * @return name of freemarker index template
     */
    @Override
    public String getIndexTemplateName() {
        return GATK_FREEMARKER_INDEX_TEMPLATE_NAME;
    }

    @Override
    public boolean includeInDocs(final DocumentedFeature documentedFeature, final ClassDoc classDoc, final Class<?> clazz) {
        // for WDL gen, we want to filter out and DocumentedFeatures that are not CommandLinePrograms
        return super.includeInDocs(documentedFeature, classDoc, clazz) &&
                //TODO: restore this filter once testing on all WDLs is completed
                //clazz.getAnnotation(RuntimeProperties.class) != null &&
                clazz.getAnnotation(CommandLineProgramProperties.class) != null;
    }

    /**
     * @return Create and return a DocWorkUnit-derived object to handle documentation
     * for the target feature(s) represented by documentedFeature.
     *
     * @param documentedFeature DocumentedFeature annotation for the target feature
     * @param classDoc javadoc classDoc for the target feature
     * @param clazz class of the target feature
     * @return DocWorkUnit to be used for this feature
     */
    @Override
    protected DocWorkUnit createWorkUnit(
            final DocumentedFeature documentedFeature,
            final com.sun.javadoc.ClassDoc classDoc,
            final Class<?> clazz)
    {
        return includeInDocs(documentedFeature, classDoc, clazz) ?
                // for WDL we don't need to customize the work unit, only the handler, so just use the
                // Barclay default WorkUnit class
                new DocWorkUnit(
                    new GATKWDLWorkUnitHandler(this),
                    documentedFeature,
                    classDoc,
                    clazz) :
                null;
    }

    @Override
    protected void processWorkUnitTemplate(
            final Configuration cfg,
            final DocWorkUnit workUnit,
            final List<Map<String, String>> indexByGroupMaps,
            final List<Map<String, String>> featureMaps)
    {
        try {
            // Merge data-model with wdl template
            final Template wdlTemplate = cfg.getTemplate(workUnit.getTemplateName());
            final File wdlOutputPath = new File(getDestinationDir(), workUnit.getTargetFileName());
            try (final Writer out = new OutputStreamWriter(new FileOutputStream(wdlOutputPath))) {
                wdlTemplate.process(workUnit.getRootMap(), out);
            }

            // Rather than rely on the default Barclay behavior of creating the JSON file directly, use a
            // second template to allow more control over the initial values. Barlcay would provide the
            // initial values everywhere, but for required args we want to use a String containing the
            // expected type, like womtool does.
            final Template jsonTemplate = cfg.getTemplate("wdlJSONTemplate.json.ftl");
            final File jsonOutputPath = new File(getDestinationDir(), workUnit.getJSONFileName());
            try (final Writer out = new OutputStreamWriter(new FileOutputStream(jsonOutputPath))) {
                jsonTemplate.process(workUnit.getRootMap(), out);
            }
        } catch (IOException e) {
            throw new DocException("IOException during documentation creation", e);
        } catch (TemplateException e) {
            throw new DocException("TemplateException during documentation creation", e);
        }
    }

    /**
     * Adds a super-category so that we can custom-order the categories in the doc index
     *
     * @param docWorkUnit
     * @return
     */
    @Override
    protected final Map<String, String> getGroupMap(final DocWorkUnit docWorkUnit) {
        final Map<String, String> root = super.getGroupMap(docWorkUnit);

        /**
         * Add-on super-category definitions. The super-category needs to match the string(s) used
         * in the Freemarker template.
         */
        root.put("supercat", HelpConstants.getSuperCategoryProperty(docWorkUnit.getGroupName()));
        return root;
    }

}
