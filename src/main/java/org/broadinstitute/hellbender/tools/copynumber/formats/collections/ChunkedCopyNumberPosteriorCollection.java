package org.broadinstitute.hellbender.tools.copynumber.formats.collections;

import org.broadinstitute.hellbender.exceptions.UserException;
import org.broadinstitute.hellbender.tools.copynumber.formats.records.CopyNumberPosteriorDistribution;
import org.broadinstitute.hellbender.tools.copynumber.gcnv.IntegerCopyNumberStateCollection;
import org.broadinstitute.hellbender.utils.Utils;
import org.broadinstitute.hellbender.utils.tsv.DataLine;

import java.io.File;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Collection of copy-number posteriors for an individual chunk containing a subset of intervals considered
 * in the analysis
 */
public final class ChunkedCopyNumberPosteriorCollection extends AbstractSampleRecordCollection<CopyNumberPosteriorDistribution> {

    public ChunkedCopyNumberPosteriorCollection(final File inputFile,
                                                final IntegerCopyNumberStateCollection integerCopyNumberStateCollection) {
        super(inputFile,
                Utils.nonNull(integerCopyNumberStateCollection).getTableColumnCollection(),
                getPosteriorRecordFromDataLineDecoder(integerCopyNumberStateCollection),
                getPosteriorRecordToDataLineEncoder(integerCopyNumberStateCollection));
    }

    /**
     * Generates an instance of {@link CopyNumberPosteriorDistribution} from a {@link DataLine} entry read from
     * a copy-number posterior file generated by `gcnvkernel`.
     *
     * Note: we assume that the posteriors are stored in the log space.
     */
    private static Function<DataLine, CopyNumberPosteriorDistribution> getPosteriorRecordFromDataLineDecoder(
            final IntegerCopyNumberStateCollection integerCopyNumberStateCollection) {
            return dataLine -> {
                try {
                    return new CopyNumberPosteriorDistribution(
                            IntStream.range(0, integerCopyNumberStateCollection.size())
                                    .mapToObj(integerCopyNumberStateCollection::get)
                                    .collect(Collectors.toMap(
                                            Function.identity(),
                                            state -> dataLine.getDouble(state.getCopyNumber()))));
                } catch (final IllegalArgumentException ex) {
                    throw new UserException.BadInput("Validation error occurred on line %d of the posterior file: "
                            + String.format(ex.getMessage(), dataLine.getLineNumber()));
                }
            };
    }

    /**
     * Generates an instance of {@link DataLine} from {@link CopyNumberPosteriorDistribution} for writing a posterior
     * collection to a file.
     *
     * Note: we store the posteriors in the log space
     */
    private static BiConsumer<CopyNumberPosteriorDistribution, DataLine> getPosteriorRecordToDataLineEncoder(
            final IntegerCopyNumberStateCollection integerCopyNumberStateCollection) {
        return (copyNumberPosteriorRecord, dataLine) -> {
            integerCopyNumberStateCollection.getCopyNumberStates()
                    .forEach(state -> dataLine.append(copyNumberPosteriorRecord.getCopyNumberPosterior(state)));
        };
    }
}
