
buildscript {
    repositories {
        mavenCentral()
     }
}


plugins {
    id "java"           // set up default java compile and test tasks
//    id "jacoco"
}

repositories {
    mavenCentral()

    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot/" //for htsjdk snapshots
    }
    mavenLocal()
}

apply from: "testsettings.gradle"

// This method unpacks the classes from a jar. This is necessary because the version of testNG we use cannot discover test
// classes from fram a .jar file, so we must unpackage them in order to run the tests.
task unpackTestJar(type: Copy){
    String testClassesJar = "$System.env.TEST_JAR"
    String testClassesDir = "$System.env.CP_DIR"

    description = "Unpackage classes from 'System.env.TEST_JAR' into 'System.env.CP_DIR'"

    if (testClassesJar != "null"){
        from zipTree(testClassesJar)
        into testClassesDir
    }
}

// The --add-open directives required to run GATK. This list needs to be kept in sync with the corresponding
// list in the main project build.gradle.
//
final runtimeAddOpens = [
        // taken from the union of everything encountered by tests, plus everything defined here:
        // https://github.com/apache/spark/blob/v3.3.0/launcher/src/main/java/org/apache/spark/launcher/JavaModuleOptions.java
        'java.base/java.lang=ALL-UNNAMED',
        'java.base/java.lang.invoke=ALL-UNNAMED',
        'java.base/java.lang.reflect=ALL-UNNAMED',
        'java.base/java.io=ALL-UNNAMED',
        'java.base/java.net=ALL-UNNAMED',
        'java.base/java.nio=ALL-UNNAMED',
        'java.base/java.util=ALL-UNNAMED',
        'java.base/java.util.concurrent=ALL-UNNAMED',
        'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
        'java.base/sun.nio.ch=ALL-UNNAMED',
        'java.base/sun.nio.cs=ALL-UNNAMED',
        'java.base/sun.security.action=ALL-UNNAMED',
        'java.base/sun.util.calendar=ALL-UNNAMED',
        'java.base/sun.nio.fs=ALL-UNNAMED',
        'java.base/java.nio.channels.spi=ALL-UNNAMED',
        'java.base/jdk.internal.ref=ALL-UNNAMED',
        'java.base/java.lang.ref=ALL-UNNAMED',
        'java.base/java.util.zip=ALL-UNNAMED',
        'java.base/java.util.jar=ALL-UNNAMED',
        'java.base/java.nio.file.attribute=ALL-UNNAMED',
        'java.base/jdk.internal.loader=ALL-UNNAMED',
        'java.base/sun.net.www.protocol.jar=ALL-UNNAMED',
        'java.base/sun.invoke.util=ALL-UNNAMED',
        'java.base/java.util.concurrent.locks=ALL-UNNAMED',
        'java.base/java.security=ALL-UNNAMED',
        'java.base/sun.reflect.annotation=ALL-UNNAMED',
        'java.base/java.text=ALL-UNNAMED',
        'java.base/java.nio.charset=ALL-UNNAMED',
        'java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED',
        'java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED',
        'java.management/javax.management=ALL-UNNAMED',
        'java.base/java.util.regex=ALL-UNNAMED',
        'java.base/sun.util.locale=ALL-UNNAMED',
        'java.base/jdk.internal.math=ALL-UNNAMED',
        'java.xml/com.sun.xml.internal.stream.util=ALL-UNNAMED',
        'java.base/java.time=ALL-UNNAMED',
        'java.base/sun.reflect.generics.factory=ALL-UNNAMED',
        'java.base/java.nio.channels=ALL-UNNAMED',
        'java.base/sun.security.util=ALL-UNNAMED',
        'java.base/java.time.zone=ALL-UNNAMED',
        'java.base/sun.reflect.generics.scope=ALL-UNNAMED',
        'java.base/sun.reflect.generics.tree=ALL-UNNAMED',
        'java.management/com.sun.jmx.interceptor=ALL-UNNAMED',
        'java.management/javax.management.openmbean=ALL-UNNAMED',
        'java.management/sun.management=ALL-UNNAMED',
        'jdk.management/com.sun.management.internal=ALL-UNNAMED',
        'jdk.management.jfr/jdk.management.jfr=ALL-UNNAMED',
        'jdk.jfr/jdk.jfr.internal.management=ALL-UNNAMED',
        'java.base/jdk.internal.module=ALL-UNNAMED',
        'java.base/java.lang.module=ALL-UNNAMED',
        'java.security.jgss/sun.security.krb5=ALL-UNNAMED'
]

final testAddOpens = [
        'java.prefs/java.util.prefs=ALL-UNNAMED' // required for jacoco tasks
]

def getJVMArgs(runtimeAddOpens, testAddOpens) {
    final testJVMAddOpens = new ArrayList<>();
    testJVMAddOpens.addAll(runtimeAddOpens);
    testJVMAddOpens.addAll(testAddOpens);
    final testConfigurationJVMArgs = testJVMAddOpens.stream()
            .flatMap(openSpec -> ['--add-opens', openSpec].stream())
            .toList()
    // add in any other required args
    testConfigurationJVMArgs.add('-Dio.netty.tryReflectionSetAccessible=true')
    return testConfigurationJVMArgs
}

test {
    jvmArgs = getJVMArgs(runtimeAddOpens, testAddOpens)
//    jacoco {
//        jvmArgs = getJVMArgs(runtimeAddOpens, testAddOpens)
//    }
}

task testOnPackagedReleaseJar(type: Test){
    String testClassesJar = "$System.env.TEST_JAR"
    String testDependencyJar = "$System.env.TEST_DEPENDENCY_JAR"
    String gatkJar = "$System.env.GATK_JAR"
    String testClassesUnpacked = "$System.env.CP_DIR"

    description = "A test task intended to be run on the release jar inside the docker image of gatk with dependencies provided as volumes"

    dependsOn unpackTestJar

    doFirst {
        if (testDependencyJar == "null") {
            throw new GradleException("Environment variable 'TEST_DEPENDENCY_JAR' not specified")
        }
        if (gatkJar == "null") {
            throw new GradleException("Environment variable 'GATK_JAR' not specified")
        }
        if (testClassesJar == "null") {
            throw new GradleException("Environment variable 'TEST_JAR' not specified")
        }
        logger.lifecycle("The classpath used for this test:")
        classpath.each {println it}
    }

    jvmArgs = getJVMArgs(runtimeAddOpens, testAddOpens)

    //Set this to match the name of the normal test output in order to simplify finding / uploading it
    reports.html.outputLocation = file("$buildDir/reports/tests/test")

    classpath = files( gatkJar, testDependencyJar, testClassesJar)
    testClassesDirs = files(testClassesUnpacked)
}

// Task intended to collect coverage data from testOnPackagedReleaseJar executed inside the docker image
// the classpath for these tests is set at execution time for testOnPackagedReleaseJar
//task jacocoTestReportOnPackagedReleaseJar(type: JacocoReport) {
//    String sourceFiles = "$System.env.SOURCE_DIR"
//    String testClassesUnpacked = "$System.env.CP_DIR"
//
//    dependsOn testOnPackagedReleaseJar
//    executionData testOnPackagedReleaseJar
//    additionalSourceDirs.setFrom(sourceSets.main.allJava.srcDirs)
//
//    sourceDirectories.setFrom(sourceFiles)
//    classDirectories.setFrom(testClassesUnpacked)
//
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests inside the docker image."
//
//    reports {
//        xml.required = true
//        html.required = true
//    }
//}
task jacocoTestReportOnPackagedReleaseJar {
    dependsOn testOnPackagedReleaseJar
}
