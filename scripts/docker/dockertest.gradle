
buildscript {
    repositories {
        mavenCentral()
        jcenter() // for shadow plugin
     }
}


plugins {
    id "java"           // set up default java compile and test tasks
    id "jacoco"
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot/" //for htsjdk snapshots
    }
    mavenLocal()
}

//============================================================================================================================
// WARNING
//============================================================================================================================
// This is duplicated code with the build script in build.gradle. If you alter the tests in any way
// please make sure to alter this test method there as well.
tasks.withType(Test) {
    outputs.upToDateWhen { false }  //tests will never be "up to date" so you can always rerun them
    String TEST_VERBOSITY = "$System.env.TEST_VERBOSITY"

    /**
     * Valid options for TEST_TYPE are:
     * cloud, integration, unit  : run one of the three disjoint partitions of the test suite
     * all                       : run all the tests
     * anything else             : run the non-cloud tests
     */
    String TEST_TYPE = "$System.env.TEST_TYPE"

//============================================================================================================================
// WARNING
//============================================================================================================================
// This is duplicated code with the build script in build.gradle. If you alter the tests in any way
// please make sure to alter this test method there as well.
    useTestNG {
        if (TEST_TYPE == "cloud") {
            // run only the cloud tests
            includeGroups 'cloud', 'bucket'
        } else if (TEST_TYPE == "integration"){
            include "**/*IntegrationTest.class"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation", "variantcalling"
        } else if (TEST_TYPE == "unit") {
            exclude "**/*IntegrationTest.class"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation", "variantcalling"
        } else if (TEST_TYPE == "variantcalling") {
            includeGroups "variantcalling"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation"
        } else if (TEST_TYPE == "spark") {
            includeGroups "spark"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation", "variantcalling"
        } else if (TEST_TYPE == "python") {
            includeGroups "python"
        } else if (TEST_TYPE == "all"){
            //include everything
        } else {
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation"
        }
    }

    systemProperty "samjdk.use_async_io_read_samtools", "false"
    systemProperty "samjdk.use_async_io_write_samtools", "true"
    systemProperty "samjdk.use_async_io_write_tribble", "false"
    systemProperty "samjdk.compression_level", "2"
    systemProperty "gatk.spark.debug", System.getProperty("gatk.spark.debug")

    environment "SPARK_LOCAL_IP","127.0.0.1"

    // set heap size for the test JVM(s)
    minHeapSize = "1G"
    maxHeapSize = "4G"

    if (TEST_VERBOSITY == "minimal") {
        int count = 0
        // listen to events in the test execution lifecycle

        beforeTest { descriptor ->
            count++
            if( count % 10000 == 0) {
                logger.lifecycle("Finished "+ Integer.toString(count++) + " tests")
            }
        }
    } else {
        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true
        beforeTest { descriptor ->
            logger.lifecycle("Running Test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }

    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
//============================================================================================================================
// WARNING
//============================================================================================================================
// This is duplicated code with the build script in build.gradle. If you alter the tests in any way
// please make sure to alter this test method there as well.
}


// This method unpacks the classes from a jar. This is necessary because the version of testNG we use cannot discover test
// classes from fram a .jar file, so we must unpackage them in order to run the tests.
task unpackTestJar(type: Copy){
    String testClassesJar = "$System.env.TEST_JAR"
    String testClassesDir = "$System.env.CP_DIR"

    description = "Unpackage classes from 'System.env.TEST_JAR' into 'System.env.CP_DIR'"

    if (testClassesJar != "null"){
        from zipTree(testClassesJar)
        into testClassesDir
    }
}

task testOnPackagedReleaseJar(type: Test){
    String testClassesJar = "$System.env.TEST_JAR"
    String testDependencyJar = "$System.env.TEST_DEPENDENCY_JAR"
    String gatkJar = "$System.env.GATK_JAR"
    String testClassesUnpacked = "$System.env.CP_DIR"

    description = "A test task intended to be run on the release jar inside the docker image of gatk with dependencies provided as volumes"

    dependsOn unpackTestJar

    doFirst {
        if (testDependencyJar == "null") {
            throw new GradleException("Environment variable 'TEST_DEPENDENCY_JAR' not specified")
        }
        if (gatkJar == "null") {
            throw new GradleException("Environment variable 'GATK_JAR' not specified")
        }
        if (testClassesJar == "null") {
            throw new GradleException("Environment variable 'TEST_JAR' not specified")
        }
        logger.lifecycle("The classpath used for this test:")
        classpath.each {println it}
    }

    classpath = files( gatkJar, testDependencyJar, testClassesJar)
    testClassesDir = file(testClassesUnpacked)
}

// Task intended to collect coverage data from testOnPackagedReleaseJar executed inside the docker image
// the classpath for these tests is set at execution time for testOnPackagedReleaseJar
task jacocoTestReportOnPackagedReleaseJar(type: JacocoReport) {
    String sourceFiles = "$System.env.SOURCE_DIR"

    dependsOn testOnPackagedReleaseJar
    executionData testOnPackagedReleaseJar

    jacoco {
        reportsDir = file("$System.env.SOURCE_DIR/build/reports/")
    }

    sourceDirectories = files(sourceFiles)
    classDirectories =  files("testClasses")

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests inside the docker image."

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
