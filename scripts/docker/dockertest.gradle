
buildscript {
    repositories {
        mavenCentral()
     }
}


plugins {
    id "java"           // set up default java compile and test tasks
    id "jacoco"
}

repositories {
    mavenCentral()

    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot/" //for htsjdk snapshots
    }
    mavenLocal()
}

apply from: "testsettings.gradle"

// This method unpacks the classes from a jar. This is necessary because the version of testNG we use cannot discover test
// classes from fram a .jar file, so we must unpackage them in order to run the tests.
task unpackTestJar(type: Copy){
    String testClassesJar = "$System.env.TEST_JAR"
    String testClassesDir = "$System.env.CP_DIR"

    description = "Unpackage classes from 'System.env.TEST_JAR' into 'System.env.CP_DIR'"

    if (testClassesJar != "null"){
        from zipTree(testClassesJar)
        into testClassesDir
    }
}

test {
    jvmArgs = [
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
            '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.net=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.cs=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.security.action=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.util.calendar=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.fs=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.channels.spi=ALL-UNNAMED',

            // required for tests
            '--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.zip=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.jar=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.file.attribute=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.net.www.protocol.jar=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.invoke.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent.locks=ALL-UNNAMED',
            '--add-opens', 'java.base/java.security=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.annotation=ALL-UNNAMED',
            '--add-opens', 'java.base/java.text=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED',
            '--add-opens', 'java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED',
            '--add-opens', 'java.management/javax.management=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.regex=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.util.locale=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.math=ALL-UNNAMED',
            '--add-opens', 'java.xml/com.sun.xml.internal.stream.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.factory=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.channels=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.security.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time.zone=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.scope=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.tree=ALL-UNNAMED',
            '--add-opens', 'java.management/com.sun.jmx.interceptor=ALL-UNNAMED',
            '--add-opens', 'java.management/javax.management.openmbean=ALL-UNNAMED',
            '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
            '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED',
            '--add-opens', 'jdk.management.jfr/jdk.management.jfr=ALL-UNNAMED',
            '--add-opens', 'jdk.jfr/jdk.jfr.internal.management=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.module=ALL-UNNAMED',
            '--add-opens', 'java.prefs/java.util.prefs=ALL-UNNAMED', // jacoco

            '-Dio.netty.tryReflectionSetAccessible=true'
    ]
    jacoco {
        jvmArgs = [
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
                '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.nio.cs=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.security.action=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.util.calendar=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.nio.fs=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio.channels.spi=ALL-UNNAMED',

                // required for tests
                '--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang.ref=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.zip=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.jar=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio.file.attribute=ALL-UNNAMED',
                '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.net.www.protocol.jar=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.invoke.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent.locks=ALL-UNNAMED',
                '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.reflect.annotation=ALL-UNNAMED',
                '--add-opens', 'java.base/java.text=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED',
                '--add-opens', 'java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED',
                '--add-opens', 'java.base/javax.management=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.regex=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.util.locale=ALL-UNNAMED',
                '--add-opens', 'java.base/jdk.internal.math=ALL-UNNAMED',
                '--add-opens', 'java.xml/com.sun.xml.internal.stream.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.time=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.reflect.generics.factory=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio.channels=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.security.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.time.zone=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.reflect.generics.scope=ALL-UNNAMED',
                '--add-opens', 'java.base/sun.reflect.generics.tree=ALL-UNNAMED',
                '--add-opens', 'java.management/com.sun.jmx.interceptor=ALL-UNNAMED',
                '--add-opens', 'java.management/javax.management.openmbean=ALL-UNNAMED',
                '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
                '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED',
                '--add-opens', 'jdk.management.jfr/jdk.management.jfr=ALL-UNNAMED',
                '--add-opens', 'jdk.jfr/jdk.jfr.internal.management=ALL-UNNAMED',
                '--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang.module=ALL-UNNAMED',
                '--add-opens', 'java.prefs/java.util.prefs=ALL-UNNAMED', // jacoco

                '-Dio.netty.tryReflectionSetAccessible=true'
        ]
    }
}

task testOnPackagedReleaseJar(type: Test){
    String testClassesJar = "$System.env.TEST_JAR"

    String testDependencyJar = "$System.env.TEST_DEPENDENCY_JAR"

    String gatkJar = "$System.env.GATK_JAR"
    String testClassesUnpacked = "$System.env.CP_DIR"

    description = "A test task intended to be run on the release jar inside the docker image of gatk with dependencies provided as volumes"

    dependsOn unpackTestJar

    doFirst {
        if (testDependencyJar == "null") {
            throw new GradleException("Environment variable 'TEST_DEPENDENCY_JAR' not specified")
        }
        if (gatkJar == "null") {
            throw new GradleException("Environment variable 'GATK_JAR' not specified")
        }
        if (testClassesJar == "null") {
            throw new GradleException("Environment variable 'TEST_JAR' not specified")
        }
        logger.lifecycle("The classpath used for this test:")
        classpath.each {println it}
    }

    jvmArgs = [
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
            '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.net=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.cs=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.security.action=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.util.calendar=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.fs=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.channels.spi=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.zip=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.jar=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.file.attribute=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.net.www.protocol.jar=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.invoke.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent.locks=ALL-UNNAMED',
            '--add-opens', 'java.base/java.security=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.annotation=ALL-UNNAMED',
            '--add-opens', 'java.base/java.text=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED',
            '--add-opens', 'java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED',
            '--add-opens', 'java.management/javax.management=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.regex=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.util.locale=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.math=ALL-UNNAMED',
            '--add-opens', 'java.xml/com.sun.xml.internal.stream.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.factory=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio.channels=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.security.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time.zone=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.scope=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.reflect.generics.tree=ALL-UNNAMED',
            '--add-opens', 'java.management/com.sun.jmx.interceptor=ALL-UNNAMED',
            '--add-opens', 'java.management/javax.management.openmbean=ALL-UNNAMED',
            '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
            '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED',
            '--add-opens', 'jdk.management.jfr/jdk.management.jfr=ALL-UNNAMED',
            '--add-opens', 'jdk.jfr/jdk.jfr.internal.management=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.module=ALL-UNNAMED',
            '--add-opens', 'java.security.jgss/sun.security.krb5=ALL-UNNAMED',
            '--add-opens', 'java.prefs/java.util.prefs=ALL-UNNAMED', // jacoco

            '-Dio.netty.tryReflectionSetAccessible=true'
    ]

    classpath = files( gatkJar, testClassesJar, testDependencyJar)
    testClassesDirs = files(testClassesUnpacked)
}

// Task intended to collect coverage data from testOnPackagedReleaseJar executed inside the docker image
// the classpath for these tests is set at execution time for testOnPackagedReleaseJar
task jacocoTestReportOnPackagedReleaseJar(type: JacocoReport) {
    String sourceFiles = "$System.env.SOURCE_DIR"
    String testClassesUnpacked = "$System.env.CP_DIR"

    dependsOn testOnPackagedReleaseJar
    executionData testOnPackagedReleaseJar
    additionalSourceDirs.setFrom(sourceSets.main.allJava.srcDirs)

    sourceDirectories.setFrom(sourceFiles)
    classDirectories.setFrom(testClassesUnpacked)

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests inside the docker image."

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
