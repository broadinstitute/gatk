buildscript {
    repositories {
        mavenCentral()

     }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

plugins {
    id "de.undercouch.download" version "1.2"
}

import de.undercouch.gradle.tasks.download.Download

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'com.github.kt3k.coveralls'

mainClassName = "org.broadinstitute.hellbender.Main"

task downloadGsaLibFile(type: Download) {
    src 'http://cran.r-project.org/src/contrib/gsalib_2.1.tar.gz'
    dest "src/main/resources/org/broadinstitute/hellbender/utils/R/gsalib.tar.gz"
    overwrite false
}

task installRPackages(type: Exec){
  executable 'Rscript'
  args 'scripts/install_R_packages.R'
  ignoreExitValue true
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

//NOTE: we ignore contracts for now
compileJava {
  options.compilerArgs = ['-proc:none', '-Xlint:all']
}
compileTestJava { 
  options.compilerArgs = ['-proc:none', '-Xlint:all']
}

installApp.dependsOn downloadGsaLibFile, installRPackages
build.dependsOn installApp
check.dependsOn installApp

dependencies {
    compile files("${System.properties['java.home']}/../lib/tools.jar")

    compile files("/Users/louisb/Workspace/dataflow-java/target/google-genomics-dataflow-v1beta2-0.6-SNAPSHOT.jar")
    compile files("/Users/louisb/.m2/repository/com/google/cloud/genomics/gatk-tools-java/1.1-SNAPSHOT/gatk-tools-java-1.1-SNAPSHOT.jar")
    compile 'com.github.samtools:htsjdk:1.129'
    compile 'org.apache.logging.log4j:log4j-api:2.1'
    compile 'org.apache.logging.log4j:log4j-core:2.1'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-math3:3.4'
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.reflections:reflections:0.9.9'
    compile 'net.sf.jopt-simple:jopt-simple:4.9-beta-1'
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.cloud.dataflow:google-cloud-dataflow-java-sdk-all:0.3.150109'
    compile 'com.google.apis:google-api-services-genomics:v1beta2-rev26-1.19.1'
    compile 'com.google.cloud.genomics:google-genomics-utils:v1beta2-0.22'



    testCompile 'org.testng:testng:6.8.8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

//set version
def stdout = new ByteArrayOutputStream()
try {
    exec {
        commandLine "git", "describe", "--always", "--long"
        standardOutput = stdout;

        ignoreExitValue = true
    }
} catch (GradleException e){
    logger.error("Couldn't determine version.  " + e.getMessage())
    e.printStackTrace();
}
version = stdout.size() > 0 ? stdout.toString().trim() : "version-unknown"


jar {
    manifest {
        attributes 'Implementation-Title': 'Hellbender-tools',
                'Implementation-Version': version,
                'Main-Class': 'org.broadinstitute.hellbender.Main'
    }
}

test {
    dependsOn installRPackages
    // enable TestNG support (default is JUnit)
    useTestNG()

    beforeSuite {
        boolean ROk = installRPackages.execResult.exitValue == 0
        if (!ROk) {
            logger.warn( "R package installation failed" )
        }
    }
    // set heap size for the test JVM(s)
    minHeapSize = "1G"
    maxHeapSize = "2G"
  
    String CI = "$System.env.CI"
    String runRTests = "$System.env.RUNR"
    if (CI == "true") {
        int count = 0
        // listen to events in the test execution lifecycle
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }

        beforeTest { descriptor ->
            count++
            if( count % 10000 == 0) {
                logger.lifecycle("Finished "+ Integer.toString(count++) + " tests")
            }
        }
    } else {
        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true
        beforeTest { descriptor ->
            logger.lifecycle("Running Test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}


task fatJar(type: Jar) {
  manifest {
        attributes 'Implementation-Title': 'Hellbender',
          'Implementation-Version': version,
          'Main-Class': 'org.broadinstitute.hellbender.Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
 
