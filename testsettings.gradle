tasks.withType(Test) {
    outputs.upToDateWhen { false }  //tests will never be "up to date" so you can always rerun them
    String TEST_VERBOSITY = "$System.env.TEST_VERBOSITY"

    /**
     * Valid options for TEST_TYPE are:
     * cloud, integration, unit  : run one of the three disjoint partitions of the test suite
     * all                       : run all the tests
     * anything else             : run the non-cloud tests
     */
    String TEST_TYPE = "$System.env.TEST_TYPE"

    useTestNG {
        if (TEST_TYPE == "cloud") {
            // run only the cloud tests
            includeGroups 'cloud', 'bucket'
        } else if (TEST_TYPE == "integration"){
            include "**/*IntegrationTest.class"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation", "variantcalling"
        } else if (TEST_TYPE == "unit") {
            exclude "**/*IntegrationTest.class"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation", "variantcalling"
        } else if (TEST_TYPE == "variantcalling") {
            includeGroups "variantcalling"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation"
        } else if (TEST_TYPE == "spark") {
            includeGroups "spark"
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation", "variantcalling"
        } else if (TEST_TYPE == "python") {
            includeGroups "python"
        } else if (TEST_TYPE == "all"){
            //include everything
        } else {
            excludeGroups "cloud", "bucket", "python", "funcotatorValidation"
        }
    }

    systemProperty "samjdk.use_async_io_read_samtools", "false"
    systemProperty "samjdk.use_async_io_write_samtools", "true"
    systemProperty "samjdk.use_async_io_write_tribble", "false"
    systemProperty "samjdk.compression_level", "2"
    systemProperty "gatk.spark.debug", System.getProperty("gatk.spark.debug")

    environment "SPARK_LOCAL_IP","127.0.0.1"
    environment "SUPPRESS_GCLOUD_CREDS_WARNING","true"

    // set heap size for the test JVM(s)
    minHeapSize = "500M"
    maxHeapSize = "3500M"

    if (TEST_VERBOSITY == "minimal") {
        int count = 0
        // listen to events in the test execution lifecycle

        beforeTest { descriptor ->
            count++
            if( count % 10000 == 0) {
                logger.lifecycle("Finished "+ Integer.toString(count++) + " tests")
            }
        }
    } else {
        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true
        beforeTest { descriptor ->
            logger.lifecycle("Running Test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }

    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}
